name: JSON upload Firebase workflow

on:
  push:
#     branches: [ main ]
    paths:
      - '**.js'
  pull_request:
#     branches: [ main ]
    paths: 
      - '**.js'
jobs:
#   testing:  #this jobs so far is from the template, just for the test, it will always success cuz we have no unit test
#     name: Build and Test default scheme using any available iPhone simulator
#     runs-on: macos-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Set Default Scheme
#         run: |
#           scheme_list=$(xcodebuild -list -json | tr -d "\n")
#           default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
#           echo $default | cat >default
#           echo Using default scheme: $default
#       - name: Build
#         env:
#           scheme: ${{ 'default' }}
#           platform: ${{ 'iOS Simulator' }}
#         run: |
#           device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
#           if [ $scheme = default ]; then scheme=$(cat default); fi
#           if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
#           file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
#           xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
#       - name: Test
#         env:
#           scheme: ${{ 'default' }}
#           platform: ${{ 'iOS Simulator' }}
#         run: |
#           device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
#           if [ $scheme = default ]; then scheme=$(cat default); fi
#           if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
#           file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
#           xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
  check-json:
#     needs: [testing]
    name: Make a json
    runs-on: ubuntu-latest
    steps:
      # check out the repository
      - name: check out
        uses: actions/checkout@v2
        
      # set the node version
      - name: setup node js
        uses: actions/setup-node@v2
        with:
          node-version: '12'
          
      # install the node js on environment for the upload script to use
      - name: install node js
        run: npm install
      
      # install firebase library
      - name: install firebase library for node js
        run: npm install firebase
      
      # run the upload script in the repository
      - name: github script
        run: node ./json-upload/uploadScript.js
